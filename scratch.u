---

-- .ian.game.hardtack

unique type Model = Model

unique type Input = North | South | East | West

play _ = run hardtack

hardtack : UI Model Input
hardtack = UI init view update parseInput

init : Model
init = Model

view : Model -> Text
view _ =
  use Text ++
  fromCharList (repeat 80 ?-) ++ "\n" ++ fromCharList (repeat 80 ?.)

update : Input -> Model -> Model
update _ m = m

parseInput : Text -> Either Text Input
parseInput t =
  if t == "w" then Right North
  else
    if t == "s" then Right South
    else
      if t == "d" then Right East
      else if t == "a" then Right West else Left "Not recognized"

-- .ian.cli.mvu

unique type UI model input =
  { init : model
  , view : model -> Text
  , update : input -> model -> model
  , parseInput : Text -> Either Text input
  }

run : UI model input ->{IO} ()
run ui =
  loop m =
    printLine (UI.view ui m)
    str = !readLine
    case UI.parseInput ui str of
      Left e ->
        printLine e
        loop m
      Right input -> loop (UI.update ui input m)
  loop (UI.init ui)

-- .ian.Nat

decrement : Nat -> Optional Nat
decrement n =
  if n == 0
    then None
    else Some (Int.truncate0 (Nat.toInt n Int.- +1))

-- these didn't work:
-- (got: The expression in red needs the {.builtin.io.IO} ability, but this location does not have access to any abilities.)
--
-- use test.v1
-- test> tests.decrement.ex1 = run (expect (decrement 0 == None))
-- test> tests.decrement.ex2 = run (expect (decrement 1 == Some 0))
-- test> tests.decrement.ex3 = run (expect (decrement 2 == Some 1))

-- .ian.List

repeat : Nat -> a -> [a]
repeat n a =
  let
    f : Nat -> Optional (a, Nat)
    f x =
      map (y -> (a,y)) (Nat.decrement x)

    unfold n f

> repeat 5 "A"

intersperse : a -> [a] -> [a]
intersperse separator xs =
  let
    f : [[a]] -> a -> [[a]]
    f acc y =
      acc :+ [separator,y]

    case xs of
      [] ->
        []

      y +: ys ->
        join (foldl f [[y]] ys)

> intersperse 0 [1,2,3,4]
