---

unique type Position = { xCoordinate : Int, yCoordinate : Int }

unique type Model = { position : Position , forts: Map Text Fort, cannons : Nat, hull : Nat}

unique type Fort = { position : Position, status : Status, cannon : Nat, health : Nat }

-- ctrl-r "

-- .ian.Nat

decrement : Nat -> Optional Nat
decrement n =
  if n == 0
    then None
    else Some (Int.truncate0 (Nat.toInt n Int.- +1))

-- these didn't work:
-- (got: The expression in red needs the {.builtin.io.IO} ability, but this location does not have access to any abilities.)
--
-- use test.v1
-- test> tests.decrement.ex1 = run (expect (decrement 0 == None))
-- test> tests.decrement.ex2 = run (expect (decrement 1 == Some 0))
-- test> tests.decrement.ex3 = run (expect (decrement 2 == Some 1))

-- .ian.List

repeat : Nat -> a -> [a]
repeat n a =
  let
    f : Nat -> Optional (a, Nat)
    f x =
      map (y -> (a,y)) (Nat.decrement x)

    unfold n f

> repeat 5 "A"

intersperse : a -> [a] -> [a]
intersperse separator xs =
  let
    f : [[a]] -> a -> [[a]]
    f acc y =
      acc :+ [separator,y]

    case xs of
      [] ->
        []

      y +: ys ->
        join (foldl f [[y]] ys)

> intersperse 0 [1,2,3,4]

-- .ian.Text

unlines : [Text] -> Text
unlines =
  foldl (acc t -> acc ++ t ++ "\n") ""

> unlines ["aaa","bbb","ccc"]
