---

view : Model -> Text
view m =
  width = 40
  height = 20
  intToNat : Int -> Optional Nat
  intToNat n = if n < +0 then None else Some (truncate0 n)
  replaceAt : Int -> Int -> a -> [[a]] -> [[a]]
  replaceAt xInt yInt a matrix =
    case (intToNat xInt, intToNat yInt) of
      (Some x, Some y) ->
        case List.at y matrix of
          None -> matrix
          Some list -> replace y (replace x a list) matrix
      _ -> matrix
  replaceCoordinate : Int -> Int -> a -> [[a]] -> [[a]]
  replaceCoordinate x y a =
    use Int +
    replaceAt (x + +20) (negate y + +10) a
  fortImage fort = case status fort of
                     Status.Active -> ?#
                     Status.Destoyed -> ?o
  addForts : Map Text Fort -> [[Char]] -> [[Char]]
  addForts forts matrix =
    use Fort position
    foldl
      (acc fort ->
        let
        replaceCoordinate
          (xCoordinate (position fort))
          (yCoordinate (position fort)) (fortImage fort) acc
        )
      matrix
      (values forts)
  x = xCoordinate (Model.position m)
  y = yCoordinate (Model.position m)
  emptyBoard : [[Char]]
  emptyBoard = repeat 20 (repeat width ?\s)
  board = replaceCoordinate x y ?+ (addForts (forts m) emptyBoard)
  showLine t =
    use Text ++
    "|" ++ fromCharList t ++ "|"
  barLine = repeat width ?-
  yourStatus =
    use Text ++
         "Your ship: hull "
      ++ Nat.toText (hull m)
      ++ ", cannons "
      ++ cannonStatus (cannons m)
  enemyStatus =
    case adjacentToFort m of
      None -> []
      Some (name, fort) ->
        desc = case status fort of
                 Active ->  "hull unknown, cannons " ++ cannonStatus (cannon fort)
                 Destoyed -> "destroyed"
        use Text ++
        [name ++ ": " ++ desc]
  unlines
    (        [yourStatus]
    List.++ enemyStatus
    List.++ List.map showLine (barLine +: board :+ barLine))

---

unique type Position = { xCoordinate : Int, yCoordinate : Int }

unique type Model = { position : Position , forts: Map Text Fort, cannons : Nat, hull : Nat}

unique type Fort = { position : Position, status : Status, cannon : Nat, health : Nat }

-- ctrl-r "

-- .ian.Nat

decrement : Nat -> Optional Nat
decrement n =
  if n == 0
    then None
    else Some (Int.truncate0 (Nat.toInt n Int.- +1))

-- these didn't work:
-- (got: The expression in red needs the {.builtin.io.IO} ability, but this location does not have access to any abilities.)
--
-- use test.v1
-- test> tests.decrement.ex1 = run (expect (decrement 0 == None))
-- test> tests.decrement.ex2 = run (expect (decrement 1 == Some 0))
-- test> tests.decrement.ex3 = run (expect (decrement 2 == Some 1))

-- .ian.List

repeat : Nat -> a -> [a]
repeat n a =
  let
    f : Nat -> Optional (a, Nat)
    f x =
      map (y -> (a,y)) (Nat.decrement x)

    unfold n f

> repeat 5 "A"

intersperse : a -> [a] -> [a]
intersperse separator xs =
  let
    f : [[a]] -> a -> [[a]]
    f acc y =
      acc :+ [separator,y]

    case xs of
      [] ->
        []

      y +: ys ->
        join (foldl f [[y]] ys)

> intersperse 0 [1,2,3,4]

-- .ian.Text

unlines : [Text] -> Text
unlines =
  foldl (acc t -> acc ++ t ++ "\n") ""

> unlines ["aaa","bbb","ccc"]
